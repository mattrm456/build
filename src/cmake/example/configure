#!/usr/bin/env bash

SCRIPT_EXE=$0
SCRIPT_BIN=`dirname $0`
[[ -n ${SCRIPT_BIN##/*} ]] && SCRIPT_BIN=$PWD/${SCRIPT_BIN#.}

CONFIGURE_UNAME=$(uname)
CONFIGURE_PREFIX="/opt/gde"
CONFIGURE_BUILD_DIRECTORY=${SCRIPT_BIN}tmp
CONFIGURE_JOBS=8
CONFIGURE_DEBUG=0
CONFIGURE_OPTIMIZE=0
CONFIGURE_TEST=0
CONFIGURE_WARN=0
CONFIGURE_VERBOSE=0

usage()
{
    echo "usage: configure [--verbose] [--prefix <directory>]"
    echo "where: "
    echo "    --prefix     <directory>    Path to the installation directory (default: ${CONFIGURE_PREFIX})"
    echo "    --build-dir  <directory>    Path to the generated cmake artifacts (default: ${CONFIGURE_BUILD_DIRECTORY})"
    echo "    --jobs       <number>       Maximum number of parallel build jobs (default: ${CONFIGURE_JOBS})"
    echo "    --debug                     Compile with debug symbols"
    echo "    --optimize                  Compile with optimizations"
    echo "    --test                      Enable test drivers"
    echo "    --warn                      Enable warnings"
    echo "    --verbose                   Generate makefiles with verbose output"
    exit 1
}

while true ; do
    case "$1" in
        --help)
            usage ;;
        --prefix)
            CONFIGURE_PREFIX=$2 ; shift 2 ;;
        --build-dir)
            CONFIGURE_BUILD_DIRECTORY=$2 ; shift 2 ;;
        --jobs)
            CONFIGURE_JOBS=$2 ; shift 2 ;;
        --debug)
            CONFIGURE_DEBUG=1 ; shift ;;
        --optimize)
            CONFIGURE_OPTIMIZE=1 ; shift ;;
        --test)
            CONFIGURE_TEST=1 ; shift ;;
        --warn)
            CONFIGURE_WARN=1 ; shift ;;
        --verbose)
            CONFIGURE_VERBOSE=1 ; shift ;;
         --*)
            usage ;;
         *)
            CONFIGURE_COMMAND=$@; break ;;
    esac
done

CONFIGURE_CMAKE=$(which cmake 2>/dev/null)
if [ ${?} -ne 0 ]; then
    CONFIGURE_CMAKE=$(which cmake3 2>/dev/null)
    if [ ${?} -ne 0 ]; then
        echo "Failed to find cmake"
        exit 1
    fi
fi

if [[ "${CONFIGURE_UNAME}" == "Linux" ]]; then
    CONFIGURE_CC=$(which gcc 2>/dev/null)
    if [ ${?} -ne 0 ]; then
        echo "Failed to find gcc"
        exit 1
    fi

    CONFIGURE_CXX=$(which g++ 2>/dev/null)
    if [ ${?} -ne 0 ]; then
        echo "Failed to find g++"
        exit 1
    fi

    CONFIGURE_RPATH=$(dirname $(dirname ${CONFIGURE_CXX}))/lib64
elif [[ "${CONFIGURE_UNAME}" == "Darwin" ]]; then
    CONFIGURE_CC=$(which clang 2>/dev/null)
    if [ ${?} -ne 0 ]; then
        echo "Failed to find clang"
        exit 1
    fi

    CONFIGURE_CXX=$(which clang++ 2>/dev/null)
    if [ ${?} -ne 0 ]; then
        echo "Failed to find clang++"
        exit 1
    fi

    CONFIGURE_RPATH=$(dirname $(dirname ${CONFIGURE_CXX}))/lib
else
    echo "Implement compiler detection for this platform"
    exit 1
fi

CONFIGURE_CMAKE_OPTION_CC="-DCMAKE_C_COMPILER=${CONFIGURE_CC}"
CONFIGURE_CMAKE_OPTION_CXX="-DCMAKE_CXX_COMPILER=${CONFIGURE_CXX}"
CONFIGURE_CMAKE_OPTION_RPATH="-DCMAKE_INSTALL_RPATH=${CONFIGURE_RPATH}"

CONFIGURE_CMAKE_CMAKELISTS=${SCRIPT_BIN}CMakeLists.txt
CONFIGURE_CMAKE_OPTION_INSTALL_PREFIX="-DCMAKE_INSTALL_PREFIX:PATH=${CONFIGURE_PREFIX}"

if [ ${CONFIGURE_VERBOSE} -ne 0 ]; then
CONFIGURE_CMAKE_OPTION_VERBOSE_MAKEFILE="-DCMAKE_VERBOSE_MAKEFILE:BOOL=ON"
else
CONFIGURE_CMAKE_OPTION_VERBOSE_MAKEFILE="-DCMAKE_VERBOSE_MAKEFILE:BOOL=OFF"
fi

if [ ${CONFIGURE_TEST} -ne 0 ]; then
CONFIGURE_CMAKE_OPTION_GDE_TEST="-DGDE_TEST:BOOL=ON"
else
CONFIGURE_CMAKE_OPTION_GDE_TEST="-DGDE_TEST:BOOL=OFF"
fi

if [ ${CONFIGURE_WARN} -ne 0 ]; then
CONFIGURE_CMAKE_OPTION_GDE_WARN="-DGDE_WARN:BOOL=ON"
else
CONFIGURE_CMAKE_OPTION_GDE_WARN="-DGDE_WARN:BOOL=OFF"
fi

CONFIGURE_NINJA=${NINJA}
if [ -n ${CONFIGURE_NINJA} ]; then
CONFIGURE_NINJA=ninja
fi

CONFIGURE_MAKE=${MAKE}
if [ -n ${CONFIGURE_MAKE} ]; then
CONFIGURE_MAKE=make
fi

if ${CONFIGURE_MAKE} -v  | grep "GNU Make" >/dev/null 2>&1; then
CONFIGURE_MAKEFLAGS="--no-print-directory"
fi

hash ${CONFIGURE_NINJA} 2>/dev/null
if [ ${?} -eq 0 ]; then
    CONFIGURE_CMAKE_GENERATOR="\"-G Ninja\""
else
    CONFIGURE_CMAKE_GENERATOR="\"-G Unix Makefiles\""
fi

if   [ ${CONFIGURE_DEBUG}    -eq 0 ]  && \
     [ ${CONFIGURE_OPTIMIZE} -eq 0 ]; then
CONFIGURE_CMAKE_OPTION_BUILD_TYPE="-DCMAKE_BUILD_TYPE:STRING=Release"
CONFIGURE_BUILD_DIRECTORY=${CONFIGURE_BUILD_DIRECTORY}/release
elif [ ${CONFIGURE_DEBUG}    -eq 0 ]  && \
     [ ${CONFIGURE_OPTIMIZE} -eq 1 ]; then
CONFIGURE_CMAKE_OPTION_BUILD_TYPE="-DCMAKE_BUILD_TYPE:STRING=Release"
CONFIGURE_BUILD_DIRECTORY=${CONFIGURE_BUILD_DIRECTORY}/release
elif [ ${CONFIGURE_DEBUG}    -eq 1 ]  && \
     [ ${CONFIGURE_OPTIMIZE} -eq 0 ]; then
CONFIGURE_CMAKE_OPTION_BUILD_TYPE="-DCMAKE_BUILD_TYPE:STRING=Debug"
CONFIGURE_BUILD_DIRECTORY=${CONFIGURE_BUILD_DIRECTORY}/debug
elif [ ${CONFIGURE_DEBUG}    -eq 1 ]  && \
     [ ${CONFIGURE_OPTIMIZE} -eq 1 ]; then
CONFIGURE_CMAKE_OPTION_BUILD_TYPE="-DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo"
CONFIGURE_BUILD_DIRECTORY=${CONFIGURE_BUILD_DIRECTORY}/debug_release
fi

CONFIGURE_BUILD_DIRECTORY=${CONFIGURE_BUILD_DIRECTORY}/obj

if [ ! -d ${CONFIGURE_BUILD_DIRECTORY} ]; then
    mkdir -p ${CONFIGURE_BUILD_DIRECTORY}
    EXIT_CODE=$?

    if [ ${EXIT_CODE} -ne 0 ]; then
        echo "Failed to make cmake build directory '${CONFIGURE_BUILD_DIRECTORY}'"
        exit ${EXIT_CODE}
    fi
fi

cd ${CONFIGURE_BUILD_DIRECTORY}

echo "${CONFIGURE_CMAKE} ${CONFIGURE_CMAKE_OPTION_INSTALL_PREFIX} ${CONFIGURE_CMAKE_OPTION_GDE_WARN} ${CONFIGURE_CMAKE_OPTION_GDE_TEST} ${CONFIGURE_CMAKE_OPTION_CC} ${CONFIGURE_CMAKE_OPTION_CXX} ${CONFIGURE_CMAKE_OPTION_RPATH} ${CONFIGURE_CMAKE_OPTION_VERBOSE_MAKEFILE} ${CONFIGURE_CMAKE_OPTION_BUILD_TYPE} ${CONFIGURE_CMAKE_GENERATOR} ../../../src"

${CONFIGURE_CMAKE} ${CONFIGURE_CMAKE_OPTION_INSTALL_PREFIX} ${CONFIGURE_CMAKE_OPTION_GDE_WARN} ${CONFIGURE_CMAKE_OPTION_GDE_TEST} ${CONFIGURE_CMAKE_OPTION_CC} ${CONFIGURE_CMAKE_OPTION_CXX} ${CONFIGURE_CMAKE_OPTION_RPATH} ${CONFIGURE_CMAKE_OPTION_VERBOSE_MAKEFILE} ${CONFIGURE_CMAKE_OPTION_BUILD_TYPE} ${CONFIGURE_CMAKE_GENERATOR} ../../../src
CONFIGURE_CMAKE_EXIT_CODE=$?

if [ ${CONFIGURE_CMAKE_EXIT_CODE} -ne 0 ]; then
    echo "Failed to configure"
    exit ${CONFIGURE_CMAKE_EXIT_CODE}
fi

CONFIGURE_DISTCLEAN_DIRECTORY=$(dirname $(dirname ${CONFIGURE_BUILD_DIRECTORY}))

# Hack to prevent 'sudo make install' from creating this file as root, which
# then means 'make package' must be run as root.
touch ${CONFIGURE_BUILD_DIRECTORY}/install_manifest.txt

cat << EOF > ${SCRIPT_BIN}/makefile
.PHONY: all build build_test test install generate package package_source clean help

MAKEFLAGS+=${CONFIGURE_MAKEFLAGS}

all: build

build:
	@${CONFIGURE_CMAKE} --build ${CONFIGURE_BUILD_DIRECTORY} --parallel ${CONFIGURE_JOBS} --target

build_test:
	@${CONFIGURE_CMAKE} --build ${CONFIGURE_BUILD_DIRECTORY} --parallel ${CONFIGURE_JOBS} --target build_test

test:
	export CTEST_PARALLEL_LEVEL=${CONFIGURE_JOBS}
	@${CONFIGURE_CMAKE} --build ${CONFIGURE_BUILD_DIRECTORY} --parallel ${CONFIGURE_JOBS} --target test

install:
	@${CONFIGURE_CMAKE} --build ${CONFIGURE_BUILD_DIRECTORY} --parallel ${CONFIGURE_JOBS} --target install

clean:
	@${CONFIGURE_CMAKE} --build ${CONFIGURE_BUILD_DIRECTORY} --parallel ${CONFIGURE_JOBS} --target clean

distclean:
	-@rm -rf ${CONFIGURE_DISTCLEAN_DIRECTORY}
	-@rm $SCRIPT_BIN/makefile

generate:
	@${CONFIGURE_CMAKE} --build ${CONFIGURE_BUILD_DIRECTORY} --parallel 1 --target generate

package:
	@${CONFIGURE_CMAKE} --build ${CONFIGURE_BUILD_DIRECTORY} --parallel ${CONFIGURE_JOBS} --target package

package_source:
	@${CONFIGURE_CMAKE} --build ${CONFIGURE_BUILD_DIRECTORY} --parallel ${CONFIGURE_JOBS} --target package_source

help:
	@${CONFIGURE_CMAKE} --build ${CONFIGURE_BUILD_DIRECTORY} --parallel ${CONFIGURE_JOBS} --target help

%.t:
	@${CONFIGURE_CMAKE} --build ${CONFIGURE_BUILD_DIRECTORY} --parallel ${CONFIGURE_JOBS} --target \$@
EOF

exit 0

