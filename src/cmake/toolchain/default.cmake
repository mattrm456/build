# GDE

include_guard(GLOBAL)

message(STATUS "GDE Build Toolchain 1.0.0")
set(GDE_TOOLCHAIN_DIR "${CMAKE_CURRENT_LIST_DIR}")

message(STATUS "GDE Build Toolchain: GDE_TOOLCHAIN_DIR = ${GDE_TOOLCHAIN_DIR}")


if("${CMAKE_HOST_SYSTEM_NAME}" STREQUAL "FreeBSD")
    find_program(GDE_TOOLCHAIN_COMPILER_CC_PATH gcc clang cc REQUIRED)
    find_program(GDE_TOOLCHAIN_COMPILER_CXX_PATH g++ clang++ c++ REQUIRED)
elseif("${CMAKE_HOST_SYSTEM_NAME}" STREQUAL "OpenBSD")
    find_program(GDE_TOOLCHAIN_COMPILER_CC_PATH gcc clang cc REQUIRED)
    find_program(GDE_TOOLCHAIN_COMPILER_CXX_PATH g++ clang++ c++ REQUIRED)
elseif("${CMAKE_HOST_SYSTEM_NAME}" STREQUAL "Darwin")
    find_program(GDE_TOOLCHAIN_COMPILER_CC_PATH clang gcc cc REQUIRED)
    find_program(GDE_TOOLCHAIN_COMPILER_CXX_PATH clang++ g++ c++ REQUIRED)
elseif("${CMAKE_HOST_SYSTEM_NAME}" STREQUAL "Linux")
    find_program(GDE_TOOLCHAIN_COMPILER_CC_PATH gcc clang cc REQUIRED)
    find_program(GDE_TOOLCHAIN_COMPILER_CXX_PATH g++ clang++ c++ REQUIRED)
elseif("${CMAKE_HOST_SYSTEM_NAME}" STREQUAL "SunOS")
    find_program(GDE_TOOLCHAIN_COMPILER_CC_PATH gcc clang cc REQUIRED)
    find_program(GDE_TOOLCHAIN_COMPILER_CXX_PATH g++ clang++ c++ REQUIRED)
elseif("${CMAKE_HOST_SYSTEM_NAME}" STREQUAL "Windows")
    find_program(GDE_TOOLCHAIN_COMPILER_CC_PATH cl clang gcc REQUIRED)
    find_program(GDE_TOOLCHAIN_COMPILER_CXX_PATH cl clang++ g++ REQUIRED)
else()
    message(FATAL_ERROR "Unsupported platform")
endif()

get_filename_component(GDE_TOOLCHAIN_COMPILER_CC_NAME ${GDE_TOOLCHAIN_COMPILER_CC_PATH} NAME_WE CACHE)
get_filename_component(GDE_TOOLCHAIN_COMPILER_CXX_NAME ${GDE_TOOLCHAIN_COMPILER_CXX_PATH} NAME_WE CACHE)

get_filename_component(GDE_TOOLCHAIN_COMPILER_CC_BIN_DIR ${GDE_TOOLCHAIN_COMPILER_CC_PATH} DIRECTORY CACHE)
get_filename_component(GDE_TOOLCHAIN_COMPILER_CXX_BIN_DIR ${GDE_TOOLCHAIN_COMPILER_CXX_PATH} DIRECTORY CACHE)

if("${GDE_TOOLCHAIN_COMPILER_CC_NAME}" STREQUAL "gcc")
set(GDE_TOOLCHAIN_DEBUGGER_NAME "gdb")
find_program(GDE_TOOLCHAIN_DEBUGGER_PATH gdb REQUIRED)
elseif("${GDE_TOOLCHAIN_COMPILER_CC_NAME}" STREQUAL "clang")
set(GDE_TOOLCHAIN_DEBUGGER_NAME "lldb")
find_program(GDE_TOOLCHAIN_DEBUGGER_PATH lldb REQUIRED)
endif()

message(STATUS "GDE Build Toolchain: GDE_TOOLCHAIN_COMPILER_CC_NAME  = ${GDE_TOOLCHAIN_COMPILER_CC_NAME}")
message(STATUS "GDE Build Toolchain: GDE_TOOLCHAIN_COMPILER_CC_PATH  = ${GDE_TOOLCHAIN_COMPILER_CC_PATH}")

message(STATUS "GDE Build Toolchain: GDE_TOOLCHAIN_COMPILER_CXX_NAME = ${GDE_TOOLCHAIN_COMPILER_CXX_NAME}")
message(STATUS "GDE Build Toolchain: GDE_TOOLCHAIN_COMPILER_CXX_PATH = ${GDE_TOOLCHAIN_COMPILER_CXX_PATH}")

message(STATUS "GDE Build Toolchain: GDE_TOOLCHAIN_COMPILER_CC_BIN_DIR  = ${GDE_TOOLCHAIN_COMPILER_CC_BIN_DIR}")
message(STATUS "GDE Build Toolchain: GDE_TOOLCHAIN_COMPILER_CXX_BIN_DIR = ${GDE_TOOLCHAIN_COMPILER_CXX_BIN_DIR}")

message(STATUS "GDE Build Toolchain: GDE_TOOLCHAIN_DEBUGGER_NAME = ${GDE_TOOLCHAIN_DEBUGGER_NAME}")
message(STATUS "GDE Build Toolchain: GDE_TOOLCHAIN_DEBUGGER_PATH = ${GDE_TOOLCHAIN_DEBUGGER_PATH}")

if ("${GDE_TOOLCHAIN_COMPILER_CC_NAME}" STREQUAL "gcc")
    include(${GDE_TOOLCHAIN_DIR}/gcc.cmake)
elseif("${GDE_TOOLCHAIN_COMPILER_CC_NAME}" STREQUAL "clang")
    include(${GDE_TOOLCHAIN_DIR}/gcc.cmake)
elseif("${GDE_TOOLCHAIN_COMPILER_CC_NAME}" STREQUAL "cl")
    include(${GDE_TOOLCHAIN_DIR}/msvc.cmake)
else()
    message(FATAL_ERROR "Unsupported compiler: ${GDE_TOOLCHAIN_COMPILER_CC_NAME}")
endif()

message(STATUS "GDE Build Toolchain: OK")
